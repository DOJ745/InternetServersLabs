/*
 * LeraX
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using System.Linq;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class LeraApiController : ControllerBase
    { 
        public MyDbContext ctxt;
        public LeraApiController(MyDbContext ctxt) {
           this.ctxt = ctxt;
        }
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>create 24.07.2020</remarks>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/Lera")]
        [ValidateModelState]
        [SwaggerOperation("ApiLeraGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Success")]
        public virtual IActionResult ApiLeraGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"userslist\" : [ {\r\n    \"lastName\" : \"Adam Smith\",\r\n    \"firstName\" : \"Adam\",\r\n    \"password\" : \"p@$$w0rd\",\r\n    \"role\" : \"customer\",\r\n    \"id\" : 101,\r\n    \"email\" : \"xxx@yyy.com\",\r\n    \"status\" : \"active\"\r\n  }, {\r\n    \"lastName\" : \"Adam Smith\",\r\n    \"firstName\" : \"Adam\",\r\n    \"password\" : \"p@$$w0rd\",\r\n    \"role\" : \"customer\",\r\n    \"id\" : 101,\r\n    \"email\" : \"xxx@yyy.com\",\r\n    \"status\" : \"active\"\r\n  } ]\r\n}";
            
            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            //            : default(InlineResponse200);            //TODO: Change the data returned
            IQueryable<User> rtn = from temp in ctxt.Users select temp;
            var list = rtn.ToList();
            return new ObjectResult(list);
        }

        /// <summary>
        /// Delete User by id
        /// </summary>
        /// <remarks>create 24.07.2020</remarks>
        /// <param name="id">The User id</param>
        /// <response code="200">User deleted</response>
        /// <response code="404">User not found</response>
        [HttpDelete]
        [Route("/api/Lera/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiLeraIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "User deleted")]
        public virtual IActionResult ApiLeraIdDelete([FromRoute][Required]int id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"lastName\" : \"Adam Smith\",\r\n  \"firstName\" : \"Adam\",\r\n  \"password\" : \"p@$$w0rd\",\r\n  \"role\" : \"customer\",\r\n  \"id\" : 101,\r\n  \"email\" : \"xxx@yyy.com\",\r\n  \"status\" : \"active\"\r\n}";
            
            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<User>(exampleJson)
            //            : default(User);            //TODO: Change the data returned
            User user = ctxt.Users.Find(id);

            var resp = new ObjectResult(user);
            if (user == null) { resp.StatusCode = 404; } 
            else 
            {
                ctxt.Users.Remove(user);
                ctxt.SaveChanges();
                resp.StatusCode = 200;
            }
            return resp;
        }

        /// <summary>
        /// Get User by id
        /// </summary>
        /// <remarks>create 24.07.2020</remarks>
        /// <param name="id">The User id</param>
        /// <response code="200">User found</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/api/Lera/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ApiLeraIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "User found")]
        public virtual IActionResult ApiLeraIdGet([FromRoute][Required]int id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"lastName\" : \"Adam Smith\",\r\n  \"firstName\" : \"Adam\",\r\n  \"password\" : \"p@$$w0rd\",\r\n  \"role\" : \"customer\",\r\n  \"id\" : 101,\r\n  \"email\" : \"xxx@yyy.com\",\r\n  \"status\" : \"active\"\r\n}";
            
            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<User>(exampleJson)
            //            : default(User);            //TODO: Change the data returned
            User user = ctxt.Users.Find(id);
            var resp = new ObjectResult(user);

            if (user == null) { resp.StatusCode = 404; } 
            else { resp.StatusCode = 200; }

            return resp;
        }

        /// <summary>
        /// Add User
        /// </summary>
        /// <remarks>create 24.07.2020</remarks>
        /// <param name="body"></param>
        /// <response code="200">User updated</response>
        /// <response code="400">User not added</response>
        [HttpPost]
        [Route("/api/Lera")]
        [ValidateModelState]
        [SwaggerOperation("ApiLeraPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "User updated")]
        public virtual IActionResult ApiLeraPost([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            // string exampleJson = null;
            // var example = exampleJson != null
            // ? JsonConvert.DeserializeObject<User>(exampleJson)
            // : default(User);            //TODO: Change the data returned
            var resp = new ObjectResult(body);
            if (ctxt.Users.Find(body.Id) == null) {
                ctxt.Users.Add(body);
                ctxt.SaveChanges();
                resp.StatusCode = 200;
            } 
            else { resp.StatusCode = 400; }

            return resp;
        }

        /// <summary>
        /// Update User by id
        /// </summary>
        /// <remarks>create 24.07.2020</remarks>
        /// <param name="body"></param>
        /// <response code="200">User updated</response>
        /// <response code="400">User not added</response>
        [HttpPut]
        [Route("/api/Lera")]
        [ValidateModelState]
        [SwaggerOperation("ApiLeraPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "User updated")]
        public virtual IActionResult ApiLeraPut([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //string exampleJson = null;
            //exampleJson = "{\r\n  \"lastName\" : \"Adam Smith\",\r\n  \"firstName\" : \"Adam\",\r\n  \"password\" : \"p@$$w0rd\",\r\n  \"role\" : \"customer\",\r\n  \"id\" : 101,\r\n  \"email\" : \"xxx@yyy.com\",\r\n  \"status\" : \"active\"\r\n}";
            
            //            var example = exampleJson != null
            //            ? JsonConvert.DeserializeObject<User>(exampleJson)
            //            : default(User);            //TODO: Change the data returned
            var resp = new ObjectResult(body);
            var user = ctxt.Users.Find(body.Id);

            user.LastName = body.LastName;
            user.FirstName = body.FirstName;
            user.Email = body.Email;
            user.Password = body.Password;

            if (user == null) { resp.StatusCode = 400; } 
            else 
            {
                ctxt.Users.Update(user);
                ctxt.SaveChanges();
                resp.StatusCode = 200;
            }

            return resp;
        }
    }
}
